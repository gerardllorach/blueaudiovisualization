{"uid":"@TREE--5c01e1-732-1f1cb05-2","object_class":"Scene","external_repository":null,"extra":{"editor":{"selected_node":"@NODE--5c01e1-63847b-1af3751-10"},"folder":"gerard/demos","filename":"waveVis.scene.json","fullpath":"gerard/demos/waveVis.scene.json","viewport_layout":{"mode":1,"viewports":[{"name":"perspective","viewport":[0,0,1,1],"render_settings":null,"editor_camera":{"object_class":"Camera","uid":"@CAM-5c01e1-c68-1fd57d0-9","layers":255,"enabled":true,"type":1,"eye":[-113.22884368896484,104.63343811035156,318.8965759277344],"center":[0,0,0],"up":[0,1,0],"near":0.1,"far":10000,"fov":45,"aspect":1,"orthographic":[-1,1,-1,1],"background_color":[0,0,0,1],"frustum_size":50,"viewport":[0,0,1,1],"render_to_texture":false,"frame":null,"show_frame":true,"clear_color":true,"clear_depth":true},"scene_camera":null}]}},"root":{"object_class":"SceneNode","name":"root","uid":"@NODE--5c01e1-c83-1570fcb-a","layers":3,"flags":{"visible":true,"is_static":false,"selectable":true,"locked":false},"children":[{"object_class":"SceneNode","name":"node_1","uid":"@NODE--5c01e1-63847b-1af3751-10","layers":3,"flags":{"visible":true,"is_static":false,"selectable":true,"locked":false},"components":[["Transform",{"object_class":"Transform","uid":"@COMP--5c01e1-63847b-1db661e-11","position":[0,0,0],"rotation":[0,0,0,1],"scaling":[1,1,1]}],["Script",{"object_class":"Script","uid":"@COMP--5c01e1-6397fb-1cbc2a9-12","enabled":true,"code":"// Read the droped files and connects the data with the Lipsync module.\n// It also controls the GUI to play the loaded audio files\n\n// Globals\nif (!LS.Globals)\n  LS.Globals = {};\n\n// Audio context\nif (!LS.Globals.AContext)\n  LS.Globals.AContext = new AudioContext();\n\nthis.bufferSize = 200;\n\n\nthis.onStart = function(){\n  \n  var context = this._context = LS.Globals.AContext;\n\t// Sound source\n  this._sample = context.createBufferSource();\n  // Gain Node\n  this._gainNode = context.createGain();\n  // Analyser\n  this._analyser = context.createAnalyser();\n  // FFT size\n  this._analyser.fftSize = 2048;\n  // FFT smoothing\n  this._analyser.smoothingTimeConstant = 0.8;\n  \n  // Wave buffer\n  this._data = new Float32Array(this._analyser.frequencyBinCount);\n  \n  // Waves arrays\n  this._waves = [];\n  \n  // FXG component\n  this.fxg = node.getComponent(LS.Components.FXGraphComponent);\n  \n}\n\n\nthis.onUpdate = function(){\n  this._analyser.getFloatTimeDomainData(this._data);\n  var wave = this._data;\n  \n  if (this._waves.length < this.bufferSize)\n  \tthis._waves.push(new Float32Array(wave));\n  else {\n    this._waves.shift();\n    this._waves.push(new Float32Array(wave));\n  }\n  \n}\n\nthis.onRender = function(){\n  \n  this.renderLines();\n  \n}\n\n\n\nthis.playSample = function(){\n  \n  // Sample to analyzer\n  this._sample.connect (this._analyser);\n  // Analyzer to Gain\n  this._analyser.connect(this._gainNode);\n  // Gain to Hardware\n  this._gainNode.connect(this._context.destination);\n  // Volume\n  this._gainNode.gain.value = 1;\n  //this.gainNode.setTargetAtTime(1, 0, 0);\n  \n  \n  that = this;\n  \n  this._sample.onended = function(){that._sample.buffer = null; console.log(\"Audio ended playing.\")};\n  // start\n  this._sample.start(0);\n\n}\n\n// DRAG AND DROP - audio files\nthis.onFileDrop = function(data) {\n\n  var that = this;\n  file = data.file;\n\n  var reader = new FileReader();\n  \n  console.log(\"Dropped audio file: \" + file.name);\n  reader.onload = function(e)\n  {\n    console.log(\"Reading...\");\n    var filedata = e.target.result;\n    LS.Globals.AContext.decodeAudioData(filedata, function(buffer) {\n      that.loadBuffer(buffer);\n\t\t});\n  };\n  reader.readAsArrayBuffer(file)\n  \n  return false;\n}\n\n// For drag and drop files\nthis.loadBuffer = function(buffer){\n\n  console.log(\"Loading buffer\");\n  this._sample = LS.Globals.AContext.createBufferSource();\n  this._sample.buffer = buffer;\n\n  this.playSample();\n}\n\n\n\n\n\n\n\nthis.heightWave = 600;\nthis.averaging = true;\nthis.temporalResize = 1000;\nthis.alphaMax = 0.5;\nthis._glowIntensity = 0.22;\n\nthis.renderLines = function(){\n  if (LS.GlobalScene.state == 0)\n    return;\n\n  var width = gl.viewport_data[2];\n  var height = gl.viewport_data[3];\n  \n  var ctx = gl;\n  ctx.start2D();\n \n  \n\tvar widthWave = width*0.8;\n  var heightWave = this.heightWave;\n  \n  for (var i = 0; i<this._waves.length-1; i++){\n    \n    // Start painting soft, then go to stronger colors\n    var rangeAlpha = [0.3, this.alphaMax];\n    ctx.strokeStyle = \"rgba(173, 238, 255,\"+ (i/this.bufferSize)*(rangeAlpha[1]-rangeAlpha[0])+rangeAlpha[0] +\")\";\n    \n    var wave = this._waves[i];\n    // Iterate wave\n    ctx.beginPath();\n    ctx.moveTo((width-widthWave)*0.5,height/2);\n    for (var j = 0; j<wave.length; j++){\n      var xP = (width-widthWave)*0.5 + widthWave*j/wave.length;\n      \n      var valueWave = wave[j];\n      var softenEdge = 0.25;\n      valueWave *= Math.min(j/(softenEdge*wave.length), 1); // Soften edges\n      valueWave *= Math.min(1, (wave.length-j)/(softenEdge*wave.length));\n      \n      var yP = heightWave*valueWave + height/2;\n      \n      \n      if (this.averaging)\n      \twave[j] = this.temporalResize/1000*(wave[j] + this._waves[i+1][j])*0.5;\n      else\n        wave[j] *= this.temporalResize/1000;\n        \n\n    \tctx.lineTo(xP, yP); \n    }\n    //ctx.closePath(); // To generate 0 middle line\n    ctx.stroke();\n    \n  }\n  \n  ctx.finish2D();\n  \n  \n}\n\n\n\nthis.onRenderGUI = function()\n{\n\n  if (LS.GlobalScene.state == 0)\n    return;\n\n  var width = gl.viewport_data[2];\n  var height = gl.viewport_data[3];\n  \n\n  if(this._sample.buffer === null){\n    LS.GUI.Label( [width/2-200,height/2,200,50], \"Drag and drop an audio file\" );\n    return;\n  }\n  \n  // GUI \n  LS.GUI.Label( [10,10,100,20], \"Vertical scale\" );\n  this.heightWave = LS.GUI.HorizontalSlider( [10, 30, 100, 20], this.heightWave, 20, height*2, true );\n  this.averaging = LS.GUI.Toggle( [50,60,65,20], this.averaging, \"Averaging\" );\n  LS.GUI.Label( [10,90,100,20], \"Temporal resize\" );\n  this.temporalResize = LS.GUI.HorizontalSlider( [10, 120, 100, 20], this.temporalResize, 900, 1100, true );\n  LS.GUI.Label( [10,150,100,20], \"Alpha\" );\n  this.alphaMax = LS.GUI.HorizontalSlider( [10, 180, 100, 20], this.alphaMax, 0.31, 1, true );\n  LS.GUI.Label( [10,210,100,20], \"Buffer size\" );\n  this.bufferSize = LS.GUI.HorizontalSlider( [10, 240, 100, 20], this.bufferSize, 2, 500, true );\n  \n  this.fxg.enabled = LS.GUI.Toggle( [190,70,65,20], this.fxg.enabled, \"Glow effect\" );\n  this._glowIntensity = LS.GUI.HorizontalSlider( [150, 90, 100, 20], this._glowIntensity, 0, 2, true );\n  this.fxg.setPropertyValue(\"glowIntensity\", this._glowIntensity)\n  LS.GUI.Label( [150,130,100,20], \"Volume\" );\n  this._gainNode.gain.value = LS.GUI.HorizontalSlider( [150, 150, 100, 20], this._gainNode.gain.value , 0, 1.5, true );\n  \n  // Buttons\n  if( LS.GUI.Button( [150,10,100,20], \"Reset buffer\" ) ){\n    this._waves = [];\n    return;\n  }\n  \n  if( LS.GUI.Button( [150,40,100,20], \"Stop sound\" ) ){\n    if(this._sample)\n      if(this._sample.buffer){\n      \tthis._sample.stop(0);\n    \t\tthis._sample.buffer = null\n  \t\t}\n    return;\n  }\n  \n\n  \n}\n\n\n","properties":{"bufferSize":200,"heightWave":994.6086956521739,"averaging":true,"temporalResize":1008.695652173913,"alphaMax":0.5,"fxg":["@ENC","component","@NODE--5c01e1-63847b-1af3751-10/@COMP--5c01e1-2cc73-177f4fc-40","FXGraphComponent"]}}],["FXGraphComponent",{"object_class":"FXGraphComponent","uid":"@COMP--5c01e1-2cc73-177f4fc-40","enabled":true,"use_antialiasing":false,"frame":{"width":0,"height":0,"filter_texture":true,"precision":2,"format":6407,"adjust_aspect":false,"use_depth_texture":true,"use_stencil_buffer":false,"num_extra_textures":0,"clone_after_unbind":false,"name":null},"use_node_camera":false,"graph_data":"{\"last_node_id\":4,\"last_link_id\":4,\"nodes\":[{\"id\":2,\"type\":\"texture/toviewport\",\"pos\":[500,100],\"size\":[130,19],\"flags\":{},\"mode\":0,\"inputs\":[{\"name\":\"Texture\",\"type\":\"Texture\",\"link\":2}],\"title\":\"Viewport\",\"properties\":{\"additive\":false,\"antialiasing\":false,\"filter\":true,\"disable_alpha\":true,\"gamma\":1}},{\"id\":1,\"type\":\"scene/frame\",\"pos\":[100,100],\"size\":[140,64],\"flags\":{},\"mode\":0,\"outputs\":[{\"name\":\"Color\",\"type\":\"Texture\",\"links\":[1]},{\"name\":\"Depth\",\"type\":\"Texture\",\"links\":null},{\"name\":\"Extra\",\"type\":\"Texture\",\"links\":null},{\"name\":\"Camera\",\"type\":\"Camera\",\"links\":null}],\"title\":\"Rendered Frame\",\"properties\":{}},{\"id\":4,\"type\":\"scene/global\",\"pos\":[85,194],\"size\":[140,19],\"flags\":{},\"mode\":0,\"outputs\":[{\"name\":\"Value\",\"links\":[3],\"label\":\"glowIntensity\"}],\"properties\":{\"name\":\"glowIntensity\",\"value\":0.6086956521739131,\"type\":\"number\",\"widget\":\"default\",\"min\":0,\"max\":1}},{\"id\":3,\"type\":\"texture/glow\",\"pos\":[324,106],\"size\":[140,49],\"flags\":{},\"mode\":0,\"inputs\":[{\"name\":\"in\",\"type\":\"Texture\",\"link\":1},{\"name\":\"dirt\",\"type\":\"Texture\",\"link\":null},{\"name\":\"intensity\",\"type\":\"number\",\"link\":3}],\"outputs\":[{\"name\":\"out\",\"type\":\"Texture\",\"links\":[2]},{\"name\":\"glow\",\"type\":\"Texture\",\"links\":null}],\"properties\":{\"enabled\":true,\"intensity\":0.22,\"persistence\":0.95,\"iterations\":16,\"threshold\":0,\"scale\":1,\"dirt_factor\":0.5,\"precision\":2}}],\"links\":[[1,1,0,3,0,\"Texture\"],[2,3,0,2,0,\"Texture\"],[3,4,0,3,2,\"number\"]],\"config\":{}}"}]]}],"components":[["GlobalInfo",{"ambient_color":[0.20000000298023224,0.20000000298023224,0.20000000298023224],"textures":{},"render_settings":null,"uid":"@COMP--5c01e1-c83-1f0087d-b","object_class":"GlobalInfo"}],["Camera",{"object_class":"Camera","uid":"@COMP--5c01e1-c83-1f9c5cb-c","layers":3,"enabled":true,"type":1,"eye":[0,100,100],"center":[0,0,0],"up":[0,1,0],"near":0.1,"far":1000,"fov":45,"aspect":1,"orthographic":[-1,1,-1,1],"background_color":[0,0,0,1],"frustum_size":50,"viewport":[0,0,1,1],"render_to_texture":false,"frame":null,"show_frame":true,"clear_color":true,"clear_depth":true}],["Light",{"enabled":true,"layers":255,"near":1,"far":500,"angle":45,"angle_end":60,"constant_diffuse":false,"use_specular":true,"att_start":0,"att_end":1000,"attenuation_type":2,"offset":0,"projective_texture":null,"use_target":false,"intensity":1,"frustum_size":50,"cast_shadows":false,"shadow_bias":0.05,"shadowmap_resolution":0,"shadow_type":"hard","force_light_matrix":false,"extra_texture":null,"type":1,"position":[100,100,100],"target":[0,0,0],"extra":[0,0,0,0],"up":[0,1,0],"color":[1,1,1],"spot_cone":true,"uid":"@COMP--5c01e1-c83-1b679fe-d","object_class":"Light"}],["Skybox",{"enabled":true,"texture":null,"material":null,"use_environment":true,"gamma":false,"intensity":1,"bake_to_cubemap":false,"uid":"@COMP--5c01e1-c86-18214f7-e","object_class":"Skybox"}]]},"layer_names":["main","secondary"],"global_scripts":[],"external_scripts":[],"preloaded_resources":{},"texture_atlas":null}